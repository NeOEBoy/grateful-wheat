{"version":3,"sources":["api/api.js","view/productSale.js","routerApp.js","serviceWorker.js","index.js"],"names":["getProductSaleList","userId","date","pageIndex","pageSize","a","productSaleUrl","KApiHost","fetch","productSaleResponse","json","productSaleJson","ProductSale","props","handleInfiniteOnLoad","fetchNextPage","state","listData","loading","hasMore","this","message","warning","setState","saleList","id","productSale","errCode","list","newHasMore","length","newPageIndex","concat","style","height","window","innerHeight","overflow","initialLoad","pageStart","loadMore","useWindow","dataSource","locale","emptyText","header","textAlign","fontSize","fontWeight","name","number","footer","renderItem","item","index","indexOf","indexDivBC","Item","width","backgroundColor","color","marginRight","marginLeft","borderRadius","marginTop","Meta","title","specification","description","saleNumber","currentNumber","realIncome","position","bottom","React","Component","Inside4QueryParams","query","URLSearchParams","useLocation","search","get","exact","path","children","RouterApp","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ef04b0e1.chunk.js","sourcesContent":["\r\n// const KApiHost = 'http://localhost:9001';\r\nconst KApiHost = 'http://gratefulwheat.ruyue.xyz/apis';\r\n\r\nconst getProductSaleList = async (userId, date, pageIndex, pageSize) => {\r\n  let productSaleUrl = KApiHost + '/product/saleList';\r\n  productSaleUrl += '?pageIndex=';\r\n  productSaleUrl += pageIndex;\r\n  productSaleUrl += '&pageSize=';\r\n  productSaleUrl += pageSize;\r\n  productSaleUrl+='&userId=';\r\n  productSaleUrl+=userId;\r\n  productSaleUrl+='&date=';\r\n  productSaleUrl+=date;\r\n\r\n  const productSaleResponse = await fetch(productSaleUrl);\r\n  const productSaleJson = await productSaleResponse.json();\r\n  return productSaleJson;\r\n}\r\n\r\nexport {\r\n  getProductSaleList\r\n};","import React from 'react';\r\nimport { List, message, Spin } from 'antd';\r\nimport { getProductSaleList } from '../api/api';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\nconst KPageSize = 20;\r\n\r\nclass ProductSale extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      listData: [],\r\n      loading: false,\r\n      hasMore: true,\r\n      pageIndex: 1\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.fetchNextPage();\r\n  }\r\n\r\n  async fetchNextPage() {\r\n    let { hasMore, pageIndex, listData } = this.state;\r\n    if (!hasMore) {\r\n      message.warning('Infinite List loaded all');\r\n      return;\r\n    }\r\n\r\n    this.setState({ loading: true });\r\n\r\n    try {\r\n      let saleList = [];\r\n      const productSale = await getProductSaleList(this.props.id, this.props.date, pageIndex, KPageSize);\r\n      if (productSale && productSale.errCode === 0) {\r\n        saleList = productSale.list;\r\n      }\r\n      const newHasMore = saleList.length / KPageSize >= 1;\r\n      let newPageIndex = pageIndex;\r\n      if (newHasMore) newPageIndex++;\r\n      listData = listData.concat(saleList);\r\n\r\n      this.setState({\r\n        listData: listData,\r\n        hasMore: newHasMore,\r\n        loading: false,\r\n        pageIndex: newPageIndex\r\n      });\r\n    } catch (err) {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  handleInfiniteOnLoad = async () => {\r\n    await this.fetchNextPage();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: window.innerHeight, overflow: \"auto\" }}>\r\n        <InfiniteScroll\r\n          initialLoad={false}\r\n          pageStart={0}\r\n          loadMore={this.handleInfiniteOnLoad}\r\n          hasMore={!this.state.loading && this.state.hasMore}\r\n          useWindow={false}\r\n        >\r\n          <List\r\n            dataSource={this.state.listData}\r\n            locale={{ emptyText: '暂时没有数据' }}\r\n            header={\r\n              <div style={{ textAlign: 'center', fontSize: 24, fontWeight: \"bold\" }}>\r\n                热卖商品\r\n                <span style={{ textAlign: 'center', fontSize: 13, fontWeight: \"lighter\" }}>\r\n                  {`门店：${this.props.name}, 总实收：¥ ${this.props.number}`}\r\n                </span>\r\n              </div>\r\n            }\r\n            footer={\r\n              <div style={{ height: 100, textAlign: 'center', fontSize: 14, fontWeight: \"lighter\" }}>\r\n                弯麦--心里满满都是你\r\n            </div>\r\n            }\r\n            renderItem={\r\n              item => {\r\n                let index = this.state.listData.indexOf(item);\r\n                let indexDivBC = \"gray\";\r\n                if (index === 0) {\r\n                  indexDivBC = \"orange\";\r\n                } else if (index === 1) {\r\n                  indexDivBC = \"green\";\r\n                } else if (index === 2) {\r\n                  indexDivBC = \"red\";\r\n                }\r\n\r\n                return (<List.Item>\r\n                  <div style={{\r\n                    width: 30, height: 30, backgroundColor: indexDivBC, color: \"white\",\r\n                    fontSize: 14, fontWeight: \"bold\", textAlign: 'center', marginRight: 15,\r\n                    marginLeft: 15, borderRadius: 10\r\n                  }}>\r\n                    <div style={{ marginTop: 3 }}>{index + 1}</div>\r\n                  </div>\r\n\r\n                  <List.Item.Meta\r\n                    title={(\r\n                      <div>\r\n                        <span style={{ fontSize: 16 }}>\r\n                          {item.name}\r\n                        </span>\r\n                        {item.specification !== '-' &&\r\n                          <span style={{ fontSize: 12 }}>\r\n                            {item.specification}\r\n                          </span>}\r\n                      </div>\r\n                    )}\r\n                    description={`销量：${item.saleNumber} 库存：${item.currentNumber}`}\r\n                  />\r\n                  <span style={{\r\n                    marginRight: 25, color: \"coral\", fontSize: 18\r\n                  }}>\r\n                    {`￥${item.realIncome}`}\r\n                  </span>\r\n                </List.Item>)\r\n              }\r\n            }\r\n          >\r\n            {this.state.loading && this.state.hasMore && (\r\n              <div>\r\n                <Spin style={{ position: \"absolute\", bottom: 15, width: '100%', textAlign: 'center' }} />\r\n              </div>\r\n            )}\r\n          </List>\r\n        </InfiniteScroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProductSale;\r\n","import React from \"react\";\r\nimport ProductSale from \"./view/productSale\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  useLocation\r\n} from \"react-router-dom\";\r\nimport './routerApp.css';\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nfunction Inside4QueryParams() {\r\n  let query = useQuery();\r\n  let id = query.get(\"id\");\r\n  let name = query.get(\"name\");\r\n  let number = query.get('number');\r\n  let date = query.get('date');\r\n\r\n  return (\r\n    <div>\r\n      <Route exact path=\"/\" children={<ProductSale />} />\r\n      <Route path=\"/productsale\" children={\r\n        <ProductSale id={id} name={name} number={number} date={date} />\r\n      } />\r\n    </div>\r\n  );\r\n}\r\nexport default function RouterApp() {\r\n  return (\r\n    <Router>\r\n      <Inside4QueryParams />\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './routerApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}